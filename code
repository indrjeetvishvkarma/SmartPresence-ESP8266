#include <ESP8266WiFi.h>
#include <SinricPro.h>
#include <SinricProSwitch.h>
//BY.INDRJEET
// ======= WiFi & Sinric Credentials =========
const char* ssid = "Your_WIFI_Name";
const char* password = "Your_WIFI_Password";
const char* appKey = "Your_Sinric_AppKey";
const char* secretKey = "Your_Sinric_SecretKey";
const char* switch1_ID = "Your_Switch1_ID";
const char* switch2_ID = "Your_Switch2_ID";

// ======= GPIO Pin Definitions =========
#define RelayPin1 12      // D6
#define RelayPin2 4       // D2
#define SwitchPin1 13     // D7
#define SwitchPin2 0      // D3
#define PIRPin 14         // D5

// ======= States & Timers =========
bool relayState1 = false;
bool relayState2 = false;
bool prevRelayState1 = false;
bool prevRelayState2 = false;
const unsigned long motionTimeout = 30000; // 30 seconds
unsigned long lastMotionTime = 0;
bool motionDetected = false;

// ======= Debounce for Buttons =========
const int debounceDelay = 200;
unsigned long lastDebounceTime1 = 0;
unsigned long lastDebounceTime2 = 0;
bool previousSwitchState1 = HIGH;
bool previousSwitchState2 = HIGH;

// ======= Relay Control Function =========
void setRelayState(int relayPin, bool state) {
  digitalWrite(relayPin, state ? LOW : HIGH); // LOW = ON for active-low relay
}

// ======= Sinric Pro Callbacks =========
bool onPowerState1(const String &deviceId, bool &state) {
  relayState1 = state;
  setRelayState(RelayPin1, state);
  Serial.printf("Switch 1 turned %s\n", state ? "ON" : "OFF");
  return true;
}

bool onPowerState2(const String &deviceId, bool &state) {
  relayState2 = state;
  setRelayState(RelayPin2, state);
  Serial.printf("Switch 2 turned %s\n", state ? "ON" : "OFF");
  return true;
}

// ======= Physical Button Control =========
void handleManualControl() {
  unsigned long currentMillis = millis();

  // Button 1
  if (digitalRead(SwitchPin1) == LOW && previousSwitchState1 == HIGH) {
    if (currentMillis - lastDebounceTime1 >= debounceDelay) {
      relayState1 = !relayState1;
      setRelayState(RelayPin1, relayState1);
      SinricProSwitch& s1 = SinricPro[switch1_ID];
      s1.sendPowerStateEvent(relayState1);
      lastDebounceTime1 = currentMillis;
    }
  }
  previousSwitchState1 = digitalRead(SwitchPin1);

  // Button 2
  if (digitalRead(SwitchPin2) == LOW && previousSwitchState2 == HIGH) {
    if (currentMillis - lastDebounceTime2 >= debounceDelay) {
      relayState2 = !relayState2;
      setRelayState(RelayPin2, relayState2);
      SinricProSwitch& s2 = SinricPro[switch2_ID];
      s2.sendPowerStateEvent(relayState2);
      lastDebounceTime2 = currentMillis;
    }
  }
  previousSwitchState2 = digitalRead(SwitchPin2);
}

// ======= PIR Motion Handler =========
void handlePIRSensor() {
  bool pir = digitalRead(PIRPin);

  if (pir == HIGH) {
    // Restore previous relay states
    relayState1 = prevRelayState1;
    relayState2 = prevRelayState2;
    setRelayState(RelayPin1, relayState1);
    setRelayState(RelayPin2, relayState2);

    SinricProSwitch& s1 = SinricPro[switch1_ID];
    SinricProSwitch& s2 = SinricPro[switch2_ID];
    s1.sendPowerStateEvent(relayState1);
    s2.sendPowerStateEvent(relayState2);

    Serial.println("Motion detected: Previous relay states restored");
    motionDetected = true;
    lastMotionTime = millis();
  }

  if (motionDetected && millis() - lastMotionTime > motionTimeout) {
    // Save current states before turning OFF
    prevRelayState1 = relayState1;
    prevRelayState2 = relayState2;

    relayState1 = false;
    relayState2 = false;
    setRelayState(RelayPin1, false);
    setRelayState(RelayPin2, false);

    SinricProSwitch& s1 = SinricPro[switch1_ID];
    SinricProSwitch& s2 = SinricPro[switch2_ID];
    s1.sendPowerStateEvent(false);
    s2.sendPowerStateEvent(false);

    Serial.println("No motion: Relays OFF (state saved)");
    motionDetected = false;
  }
}

// ======= Setup Function =========
void setup() {
  Serial.begin(9600);
  pinMode(RelayPin1, OUTPUT);
  pinMode(RelayPin2, OUTPUT);
  digitalWrite(RelayPin1, HIGH);  // Relay OFF initially
  digitalWrite(RelayPin2, HIGH);

  pinMode(SwitchPin1, INPUT_PULLUP);
  pinMode(SwitchPin2, INPUT_PULLUP);
  pinMode(PIRPin, INPUT);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.print(".");
  }
  Serial.println("\nWiFi Connected!");

  SinricProSwitch& s1 = SinricPro[switch1_ID];
  SinricProSwitch& s2 = SinricPro[switch2_ID];
  s1.onPowerState(onPowerState1);
  s2.onPowerState(onPowerState2);

  SinricPro.begin(appKey, secretKey);
}

// ======= Main Loop =========
void loop() {
  SinricPro.handle();
  handleManualControl();
  handlePIRSensor();
}
